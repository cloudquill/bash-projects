#!/bin/bash
#
# This script generates a random password based on a user's preference.
# A strong password consists of at least an uppercase letter, a lowercase 
# letter, number and symbol. It is also >14 characters in length.
#
# This script is for practical purposes!

# This fxn asks the user's preferences for their password.
preferences(){
  echo "###### The Best Password Generator ######"
  
  while true; do
    read -p "Should your password have UPPERCASE letters (Y/N): " pref_upper
    if [[ "${pref_upper,,}" == 'y' || "${pref_upper,,}" == 'n' ]]; then
      break
    else
      echo "Please pick either Y or N"
    fi
  done
  
  while true; do
    read -p "How about symbols (Y/N): " pref_sym
    if [[ "${pref_sym,,}" == 'y' || "${pref_sym,,}" == 'n' ]]; then
      break
    else
      echo "Please pick either Y or N"
    fi
  done
  
  while true; do
    read -p "How long should your password be: " length
    if [[ "${length}" =~ ^[0-9]+$ && "${length}" -gt 14 ]]; then
      break
    else
      echo "Please input a number greater than 14."
    fi
  done
}

# This fxn guarantees the user preference appears in the password.
# Initially, it was to fulfill the basic minimum condition of a strong password 
# with just a few tweaks.
gen_min_pass(){
  upper_letters="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  lower_letters="${upper_letters,,}"
  numbers="0123456789"
  symbols="@#%&*"
  min_pass=""
  
  # This section picks one random character each from the arrays defined above.
  # "$((RANDOM % ${#array})):1" - RANDOM first generates a random number. The 
  # modulo is then evaluated using the length of the array. The remainder 
  # serves as our index for picking one random character from the array (:1).
  min_pass+=${numbers:$((RANDOM % ${#numbers})):1}
  min_pass+=${lower_letters:$((RANDOM % ${#lower_letters})):1}
  
  if [[ "${pref_upper,,}" == 'y' ]]; then
    min_pass+=${upper_letters:$((RANDOM % ${#upper_letters})):1}
  fi
  
  if [[ "${pref_sym,,}" == 'y' ]]; then
    min_pass+=${symbols:$((RANDOM % ${#symbols})):1}
  fi
  
  echo "${min_pass}"
}

# This adds random characters to fill password to required length
padding(){
  filler=""
  remaining_length=$((length - ${#min_pass}))

  # This section picks a lucky number that determines what characters will
  # be added to fill our password until the desired length is reached.
  for((i=0; i<${remaining_length}; i++)); do
    lucky_num=$((RANDOM % 4))
    if [ "${lucky_num}" == 0 ]; then
      filler+=${numbers:$((RANDOM % ${#numbers})):1}
    elif [ "${lucky_num}" == 1 ]; then
      filler+=${lower_letters:$((RANDOM % ${#lower_letters})):1}
    elif [[ "${lucky_num}" == 2 && "${pref_upper,,}" == 'y' ]]; then
      filler+=${upper_letters:$((RANDOM % ${#upper_letters})):1}
    elif [[ "${lucky_num}" == 3 && "${pref_sym,,}" == 'y' ]]; then
      filler+=${symbols:$((RANDOM % ${#symbols})):1}
    fi
  done
}

save_to_file(){
  echo "${min_pass}${filler}" > generated_pass.txt
  echo "Your password is saved to generated_pass.txt"
}

# This fxn requires the xclip package to work.
save_to_clipboard(){
  if command -v xclip >/dev/null 2>&1; then
    echo -n "${min_pass}${filler}" | xclip -selection clipboard
    echo "Password copied to clipboard."
  else
    echo -n "The 'xclip' utility is not installed. Copy to a file instead? (Y/N): "
    read alt_option
    
    case "${alt_option}" in
      Y) save_to_file;;
      *) return;;
    esac
  fi
}

copy_pass(){
  echo -e "For security purposes, you should copy your password to your clipboard or a file.\n1) File\n2) Clipboard (This needs the 'xclip' utility)"
  read -p "Please select your preferred option: " save_option
  
  case "${save_option}" in
    1) save_to_file;;
    2) save_to_clipboard;;
  esac
}

preferences
gen_min_pass
padding
copy_pass
